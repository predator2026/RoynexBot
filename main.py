############################################################
#  ROYNEX | VIP ‚ö°Ô∏è ‚Äî Telegram-Bot (python-telegram-bot 20.8)
############################################################
#
# requirements.txt
#   python-telegram-bot>=20.8
#   Flask#
# ‚ñ∏ –ê–≤—Ç–æ—Ä: —Ç—ã  +  ChatGPT.  –ü—Ä–∞–≤–∞ —Ç–≤–æ–∏ üòâ
from keep_alive import keep_alive

keep_alive()
import os, json, threading
from telegram import (Update, InlineKeyboardButton, InlineKeyboardMarkup,
                      InputMediaPhoto)
from telegram.ext import (ApplicationBuilder, Application, CommandHandler,
                          CallbackQueryHandler, ContextTypes, filters)

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ---------- #
ADMIN_ID = 8121378603  # –∫—Ç–æ –º–æ–∂–µ—Ç /addbalance
MAIN_PHOTO = "https://i.imgur.com/T0bvlAM.jpeg"
PROJECT_URL = "https://roynex.com"

REVIEWS_PHOTOS = [
    "https://i.imgur.com/ehnNYY6.jpeg",
    "https://i.imgur.com/qB7FNQw.jpeg",
    "https://i.imgur.com/6F0qKwc.jpeg",
    "https://i.imgur.com/huXIN7N.jpeg",
    "https://i.imgur.com/oIgbmTS.jpeg",
    "https://i.imgur.com/vj4uVwQ.jpeg",
    "https://i.imgur.com/oyFmhrg.jpeg",
    "https://i.imgur.com/yElySj3.jpeg",
    "https://i.imgur.com/0QJNzZT.jpeg",
    "https://i.imgur.com/zUybKUC.jpeg",
]

# ---------- –≠–ú–û–î–ñ–ò (fallback / premium) ---------- #
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å Premium-emoji ‚Äî –≤–ø–∏—à–∏—Ç–µ ID ‚Üì
PREMIUM_DIAMOND_ID = None  # –ø—Ä–∏–º–µ—Ä: "543210987654321"
PREMIUM_COIN_ID = None  # –ø—Ä–∏–º–µ—Ä: "987654321012345"


def prem(emoji_id, default):
    return f'<tg-emoji emoji-id="{emoji_id}">{default}</tg-emoji>' if emoji_id else default


DIAMOND = prem(PREMIUM_DIAMOND_ID, "üíé")
COIN = prem(PREMIUM_COIN_ID, "ü™ô")

# ---------- –¢–ï–ö–°–¢–´ / –ö–ù–û–ü–ö–ò ---------- #
BTN_VIP = f"‘≥’∂’•’¨ VIP {DIAMOND}"
BTN_REVIEW = "‘ø’°÷Ä’Æ’´÷Ñ’∂’•÷Ä Roynex-’´ ’¥’°’Ω’´’∂ üí¨"
BTN_ROYCOIN = f"RoyCoin {COIN}‚ÄÇsoon"
BTN_VIP_ADV = "VIP-’´ ’°’º’°’æ’•’¨’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® üìà"
BTN_DUPL = "’ç’ø’°’∂’°’¨ ’£’∏÷Ç’¥’°÷Ä’® üí∞"
BTN_BACK = "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨ ’¥’•’∂’µ’∏÷Ç"

VIP_PRICE_TEXT = f"{DIAMOND} <b>VIP ’°÷Ä’™’•÷Ñ’® ‚Äî 45 000 ’§÷Ä.</b> üî•"
VIP_ADV_TEXT = (
    "üß† <b>VIP ’¢’°’™’´’∂’® ’∂’°’≠’°’ø’•’Ω’æ’°’Æ ’ß ’°’µ’∂ ’¥’°÷Ä’§’Ø’°’∂÷Å ’∞’°’¥’°÷Ä, ’∏’æ÷Ñ’•÷Ä ’¨’´’∏’æ’´’∂ ’Ø’•’∂’ø÷Ä’∏’∂’°÷Å’°’Æ ’•’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’´ ’æ÷Ä’°</b>‚Ä§\n\n\n"
    "üöÄ x2‚Ä§4 ’∑’°’∞’∏÷Ç’µ’©\n\n"
    "üóùÔ∏è ’Ñ’∏÷Ç’ø÷Ñ RoyCoin-’´ ’£’∏÷Ä’Æ’°÷Ä÷Ñ’∂’•÷Ä\n\n"
    "üì≤ ’Ä’•’º’°’≠’∏’Ω’°’¶’°’∂’£ ’¥’•’∂’•’ª’•÷Ä’∂’•÷Ä’´ ’∞’•’ø\n\n"
    "üíº ‘±’∂’Ω’°’∞’¥’°’∂ ’∂’•÷Ä’§÷Ä’∏÷Ç’¥ (x2‚Ä§4)\n\n"
    "üìé ’Ñ’∏÷Ç’ø÷Ñ üíµ <b>ELITE —á–∞—Ç</b>")

PAYMENT_TMPL = (
    "üè¶ <b>ACBA 4355 0539 2271 9150</b>\n\n"
    "‚úÖ ’ì’∏’≠’°’∂÷Å’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’Ø’ø÷Ä’∏’∂’® ’¥’•’∂’•’ª’•÷Ä’∂’•÷Ä’´’∂ üëâ "
    "<a href='https://t.me/RoynexManager'>@RoynexManager</a>\n\n"
    f"{DIAMOND} VIP ÷Ö’£’ø’æ’∏’≤’∂’•÷Ä’´ ’∑’°’∞’∏÷Ç’µ’©’® ’Ø÷Ä’Ø’∂’°’∫’°’ø’Ø’æ’∏÷Ç’¥ ’ß <b>x2.4</b>")

DUPL_AMOUNTS = [
    "10 000üíé", "20 000üíé", "40 000üíé", "80 000üíé", "200 000üíé", "400 000üíé",
    "1 000 000üíé"
]

# ---------- ¬´–ë–∞–∑–∞¬ª (–±–∞–ª–∞–Ω—Å—ã / VIP-—Å–ø–∏—Å–æ–∫) ---------- #
DATA_FILE = "db.json"
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({"balances": {}, "vip": []}, f)
with open(DATA_FILE, "r") as f:
    db = json.load(f)


def save_db():  # –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —É—á—ë—Ç
    with open(DATA_FILE, "w") as f:
        json.dump(db, f, ensure_ascii=False)


# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π ---------- #
user_msgs: dict[int, list[int]] = {}


async def clear_user(uid: int, bot):
    for mid in user_msgs.get(uid, []):
        try:
            await bot.delete_message(uid, mid)
        except:
            pass
    user_msgs[uid] = []


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---------- #
async def show_menu(uid: int, bot):
    kb = [
        [InlineKeyboardButton(BTN_VIP, callback_data="buy_vip")],
        [InlineKeyboardButton(BTN_REVIEW, callback_data="reviews")],
        [InlineKeyboardButton(BTN_ROYCOIN, callback_data="roycoin")],
        [InlineKeyboardButton(BTN_VIP_ADV, callback_data="vip_adv")],
        [InlineKeyboardButton(BTN_DUPL, callback_data="dupl")],
    ]
    msg = await bot.send_photo(uid,
                               MAIN_PHOTO,
                               caption="‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø RoyNex ü§ù",
                               reply_markup=InlineKeyboardMarkup(kb))
    user_msgs.setdefault(uid, []).append(msg.message_id)


# ---------- /start ---------- #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    # —É–¥–∞–ª—è–µ–º /start
    try:
        await context.bot.delete_message(uid, update.message.message_id)
    except:
        pass
    await clear_user(uid, context.bot)
    await show_menu(uid, context.bot)


# ---------- Callback-–∫–Ω–æ–ø–∫–∏ ---------- #
async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q, uid = update.callback_query, update.callback_query.from_user.id
    await q.answer()
    await clear_user(uid, context.bot)

    if q.data == "reviews":
        media = [InputMediaPhoto(p) for p in REVIEWS_PHOTOS[:10]]
        if media:
            ms = await context.bot.send_media_group(uid, media=media)
            user_msgs.setdefault(uid, []).extend([m.message_id for m in ms])
        kb = [[InlineKeyboardButton(BTN_BACK, callback_data="back")]]
        m = await context.bot.send_message(
            uid,
            "’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’°÷Ä’±’°’£’°’∂÷Ñ’¥’°’∂ ’∞’°’¥’°÷Ä üí¨",
            reply_markup=InlineKeyboardMarkup(kb))
        user_msgs[uid].append(m.message_id)

    elif q.data == "buy_vip":
        kb = [[InlineKeyboardButton(BTN_BACK, callback_data="back")]]
        m = await q.message.reply_text(VIP_PRICE_TEXT + "\n\n" + PAYMENT_TMPL,
                                       reply_markup=InlineKeyboardMarkup(kb),
                                       parse_mode="HTML")
        user_msgs[uid].append(m.message_id)

    elif q.data == "vip_adv":
        kb = [[InlineKeyboardButton(BTN_BACK, callback_data="back")]]
        m = await q.message.reply_text(VIP_ADV_TEXT,
                                       reply_markup=InlineKeyboardMarkup(kb),
                                       parse_mode="HTML")
        user_msgs[uid].append(m.message_id)

    elif q.data == "roycoin":
        kb = [[InlineKeyboardButton(BTN_BACK, callback_data="back")]]
        m = await q.message.reply_text("üöß RoyCoin ’∑’∏÷Ç’ø’∏’æ‚Ä¶",
                                       reply_markup=InlineKeyboardMarkup(kb))
        user_msgs[uid].append(m.message_id)

    elif q.data == "dupl":
        rows = [[
            InlineKeyboardButton(f"{amt} ’§÷Ä.", callback_data=f"dupl_{amt}")
        ] for amt in DUPL_AMOUNTS]
        rows.append([InlineKeyboardButton(BTN_BACK, callback_data="back")])
        m = await q.message.reply_text("‚ôü ‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ç’¥’°÷Ä’®’ù",
                                       reply_markup=InlineKeyboardMarkup(rows))
        user_msgs[uid].append(m.message_id)

    elif q.data.startswith("dupl_"):
        kb = [[InlineKeyboardButton(BTN_BACK, callback_data="back")]]
        m = await q.message.reply_text(PAYMENT_TMPL,
                                       reply_markup=InlineKeyboardMarkup(kb),
                                       parse_mode="HTML")
        user_msgs[uid].append(m.message_id)

    elif q.data == "back":
        await show_menu(uid, context.bot)


# ---------- Flask keep-alive (Replit) ---------- #
from flask import Flask

app = Flask(__name__)


@app.route("/")
def home():
    return "ROYNEX bot is alive!", 200


def keep_alive():
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()


# ---------- MAIN ---------- #
def main():
    keep_alive()
    bot_token = os.getenv("BOT_TOKEN")
    # –∏–ª–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ —Ä—É–∫–∞–º–∏:
    # bot_token = "YOUR_BOT_TOKEN_HERE"
    if not bot_token:
        print("‚ùå  –î–æ–±–∞–≤—å BOT_TOKEN –≤ Secrets")
        return

    application: Application = ApplicationBuilder().token(bot_token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(buttons))

    print("‚úÖ  Roynex bot started")
    application.run_polling()


if __name__ == "__main__":
    main()
